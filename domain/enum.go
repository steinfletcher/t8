// Code generated by "gonum -types=ParameterTypeEnum,RemovePathOperatorEnum"; DO NOT EDIT.
// See https://github.com/steinfletcher/gonum
package domain

import "encoding/json"
import "errors"
import "fmt"

type parameterTypeInstanceJsonDescriptionModel struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

var parameterTypeInstance = ParameterTypeEnum{
	String: "string",
	Option: "option",
}

// ParameterType is the enum that instances should be created from
type ParameterType struct {
	name        string
	value       string
	description string
}

// Enum instances
var String = ParameterType{name: "string", value: "String", description: ""}
var Option = ParameterType{name: "option", value: "Option", description: ""}

// NewParameterType generates a new ParameterType from the given display value (name)
func NewParameterType(value string) (ParameterType, error) {
	switch value {
	case "string":
		return String, nil
	case "option":
		return Option, nil
	default:
		return ParameterType{}, errors.New(
			fmt.Sprintf("'%s' is not a valid value for type", value))
	}
}

// Name returns the enum display value
func (g ParameterType) Name() string {
	switch g {
	case String:
		return String.name
	case Option:
		return Option.name
	default:
		panic("Could not map enum")
	}
}

// String returns the enum display value and is an alias of Name to implement the Stringer interface
func (g ParameterType) String() string {
	return g.Name()
}

// Error returns the enum name and implements the Error interface
func (g ParameterType) Error() string {
	return g.Name()
}

// Description returns the enum description if present. If no description is defined an empty string is returned
func (g ParameterType) Description() string {
	switch g {
	case String:
		return ""
	case Option:
		return ""
	default:
		panic("Could not map enum description")
	}
}

// ParameterTypeNames returns the displays values of all enum instances as a slice
func ParameterTypeNames() []string {
	return []string{
		"string",
		"option",
	}
}

// ParameterTypeValues returns all enum instances as a slice
func ParameterTypeValues() []ParameterType {
	return []ParameterType{
		String,
		Option,
	}
}

// MarshalJSON provides json serialization support by implementing the Marshaler interface
func (g ParameterType) MarshalJSON() ([]byte, error) {
	if g.Description() != "" {
		m := parameterTypeInstanceJsonDescriptionModel{
			Name:        g.Name(),
			Description: g.Description(),
		}
		return json.Marshal(m)
	}
	return json.Marshal(g.Name())
}

// UnmarshalJSON provides json deserialization support by implementing the Unmarshaler interface
func (g *ParameterType) UnmarshalJSON(b []byte) error {
	var v string
	err := json.Unmarshal(b, &v)
	if err != nil {
		return err
	}

	instance, createErr := NewParameterType(v)
	if createErr != nil {
		return createErr
	}

	g.name = instance.name
	g.value = instance.value

	return nil
}

type removePathOperatorInstanceJsonDescriptionModel struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

var removePathOperatorInstance = RemovePathOperatorEnum{
	Equal:    "equal",
	NotEqual: "notEqual",
}

// RemovePathOperator is the enum that instances should be created from
type RemovePathOperator struct {
	name        string
	value       string
	description string
}

// Enum instances
var Equal = RemovePathOperator{name: "equal", value: "Equal", description: ""}
var NotEqual = RemovePathOperator{name: "notEqual", value: "NotEqual", description: ""}

// NewRemovePathOperator generates a new RemovePathOperator from the given display value (name)
func NewRemovePathOperator(value string) (RemovePathOperator, error) {
	switch value {
	case "equal":
		return Equal, nil
	case "notEqual":
		return NotEqual, nil
	default:
		return RemovePathOperator{}, errors.New(
			fmt.Sprintf("'%s' is not a valid value for type", value))
	}
}

// Name returns the enum display value
func (g RemovePathOperator) Name() string {
	switch g {
	case Equal:
		return Equal.name
	case NotEqual:
		return NotEqual.name
	default:
		panic("Could not map enum")
	}
}

// String returns the enum display value and is an alias of Name to implement the Stringer interface
func (g RemovePathOperator) String() string {
	return g.Name()
}

// Error returns the enum name and implements the Error interface
func (g RemovePathOperator) Error() string {
	return g.Name()
}

// Description returns the enum description if present. If no description is defined an empty string is returned
func (g RemovePathOperator) Description() string {
	switch g {
	case Equal:
		return ""
	case NotEqual:
		return ""
	default:
		panic("Could not map enum description")
	}
}

// RemovePathOperatorNames returns the displays values of all enum instances as a slice
func RemovePathOperatorNames() []string {
	return []string{
		"equal",
		"notEqual",
	}
}

// RemovePathOperatorValues returns all enum instances as a slice
func RemovePathOperatorValues() []RemovePathOperator {
	return []RemovePathOperator{
		Equal,
		NotEqual,
	}
}

// MarshalJSON provides json serialization support by implementing the Marshaler interface
func (g RemovePathOperator) MarshalJSON() ([]byte, error) {
	if g.Description() != "" {
		m := removePathOperatorInstanceJsonDescriptionModel{
			Name:        g.Name(),
			Description: g.Description(),
		}
		return json.Marshal(m)
	}
	return json.Marshal(g.Name())
}

// UnmarshalJSON provides json deserialization support by implementing the Unmarshaler interface
func (g *RemovePathOperator) UnmarshalJSON(b []byte) error {
	var v string
	err := json.Unmarshal(b, &v)
	if err != nil {
		return err
	}

	instance, createErr := NewRemovePathOperator(v)
	if createErr != nil {
		return createErr
	}

	g.name = instance.name
	g.value = instance.value

	return nil
}
