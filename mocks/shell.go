// Code generated by MockGen. DO NOT EDIT.
// Source: shell.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/steinfletcher/t8/domain"
	reflect "reflect"
)

// MockPromptReader is a mock of PromptReader interface
type MockPromptReader struct {
	ctrl     *gomock.Controller
	recorder *MockPromptReaderMockRecorder
}

// MockPromptReaderMockRecorder is the mock recorder for MockPromptReader
type MockPromptReaderMockRecorder struct {
	mock *MockPromptReader
}

// NewMockPromptReader creates a new mock instance
func NewMockPromptReader(ctrl *gomock.Controller) *MockPromptReader {
	mock := &MockPromptReader{ctrl: ctrl}
	mock.recorder = &MockPromptReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPromptReader) EXPECT() *MockPromptReaderMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *MockPromptReader) String(parameter domain.Parameter) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String", parameter)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// String indicates an expected call of String
func (mr *MockPromptReaderMockRecorder) String(parameter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockPromptReader)(nil).String), parameter)
}

// Options mocks base method
func (m *MockPromptReader) Options(parameter domain.Parameter) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", parameter)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Options indicates an expected call of Options
func (mr *MockPromptReaderMockRecorder) Options(parameter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockPromptReader)(nil).Options), parameter)
}

// Confirm mocks base method
func (m *MockPromptReader) Confirm(question string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", question)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Confirm indicates an expected call of Confirm
func (mr *MockPromptReaderMockRecorder) Confirm(question interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockPromptReader)(nil).Confirm), question)
}
